# Configuration reference: https://go.nzyme.org/configuration-reference        
                                                                                                                                                              
# General nzyme configuration.                                                 
general: {
  role: LEADER

  # The ID or name of this nzyme instance. Must be unique and contain only alphanumeric characters, underscores and dashes.
  id: nzyme-node-01

  # Admin password SHA256 hash. (64 characters) - generate with, for example, sha256sum on Linux: $ echo -n secretpassword | sha256sum
  # You will use this password to log in to the web interface.
  # echo -n secretpassword | sha256sum
  admin_password_hash: $ADMIN_PASSWORD_HASH # DO NOT CHANGE HERE, change it in .env

  # Path to postgreSQL database. Make sure to change username, password and database name. (This is described in the documentation)
  database_path: "$DATABASE_URL" # DO NOT CHANGE HERE, change it in .env

  # Download current list of manufacturers and enable MAC address to manufacturer lookup?
  fetch_ouis: true

  # Path to directory that the tracker will use to store some temporary information. (must be writable)
  data_directory: /usr/share/nzyme

  # We use Python to inject frames for traps.
  python {
    # Path to python executable. (nzyme supports both Python 3 and 2)
    path: /usr/bin/python3.8

    # Script directory. This must be an existing and writable directory. We'll store some generated Python scripts here.
    script_directory: /tmp

    # Script prefix. A prefix for the generate scripts. There is usually no reason to change this setting.
    script_prefix: nzyme_
  }

  alerting {
    # Notifications and callbacks for triggered alerts.
    callbacks: [
      {
        type: email
        enabled: false

        # One of: SMTP, SMTPS or SMTP_TLS
        transport_strategy: SMTP_TLS

        host: smtp.example.org
        port: 587
        username: "your_username"
        password: "your_password"

        from: "nzyme <nzyme@example.org>"
        subject_prefix: "[NZYME]"

        recipients: [
          "Somebody <somebody@example.org>",
          "Somebody Else <somebody.else@example.org>"
        ]
      }

      {
        type: file
        enabled: true

        path: /var/log/nzyme/alerts.log 
      }
    ]

    # Length of the training period. Do not change this if you don't know what this means.
    training_period_seconds: 300
  }

  # Regularly check if this version of nzyme is outdated?
  versionchecks: true
}

# Web interface and REST API configuration.
interfaces: {
  # Make sure to set this to an IP address you can reach from your workstation. 
  rest_listen_uri: "http://0.0.0.0:22900/"

  # This is usually the same as the `rest_listen_uri`. Take a look at the configuration documentation to learn about
  # other use-cases. It will be interesting if you run behind a load balancer or NAT. (basically, it is the address
  # that your web browser will use to try to connect to nzyme and it has to be reachable for it.)
  http_external_uri: "$EXTERNAL_URL" # DO NOT CHANGE HERE, change it in .env

  # Use TLS? (HTTPS) See https://go.nzyme.org/docs-https
  use_tls: false
}

# List of uplinks. Sends frame meta information and alerts to log management systems like Graylog for threat hunting and
# forensics. See https://go.nzyme.org/uplinks
uplinks: []

# 802.11/Wifi adapters that are designated to read traffic.
# The more monitors you have listening on different channels, the more traffic will be picked up and the more
# traffic will be available as the basis for alerts and analysis.
# See: https://go.nzyme.org/configuration-reference
802_11_monitors: [
  {
    # The 802.11/WiFi adapter name. (from `ifconfig` or `ip link`)
    device: "$WLAN"

    # WiFi interface and 802.11 channels to use. Nzyme will cycle your network adapters through these channels.
    # Consider local legal requirements and regulations.
    # See also: https://en.wikipedia.org/wiki/List_of_WLAN_channels
    channels: [1,2,3,4,5,6,7,8,9,10,11,12,13,36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,149,153,157,161,165]
    #channels: [1,6,11]

    # There is no way for nzyme to configure your wifi interface directly. We are using direct operating system commands to
    # configure the adapter. Examples for Linux are in the documentation.
    channel_hop_command: "iwconfig {interface} channel {channel}"

    # Channel hop interval in seconds. Leave at default if you don't know what this is.
    channel_hop_interval: 1

    # Time this monitor can remain without recording any frames until it is marked as failing. Under certain conditions,
    # it can be normal to not record any frames for an extended period of time. If you receive warnings and alerts for
    # failed probes when there were simply no frames to record, increase this value. Default: 60
    max_idle_time_seconds: 60

    # Skip the automatic monitor mode configuration of this interface. Only enable this if for some reason libpcap can't
    # properly configure this interface into monitor mode. In that case, you can try to set it manually instead.
    skip_enable_monitor: false
  }
]

# A list of all your 802.11/WiFi networks. This will be used for automatic alerting.
# It is recommended to leave this empty or on default at first start of nzyme and
# then build it using the data nzyme shows in the web interface. For example, the
# "security" and "fingerprints" strings can be copied from the web interface.
# See: https://go.nzyme.org/network-monitoring
802_11_networks: [
  {
    ssid: $ESSID_PSK
    channels: [6]
    security: [WPA2-PSK-CCMP-TKIP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_PSK",
        fingerprints: [ 7303e2cb387b7367923cf58574b7e0e7edf58dc541a9714d117d16384bd00613 ]
      }
    ]
  },
  {
    ssid: $ESSID_OPN
    channels: [6]
    security: [NONE]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_OPN",
        fingerprints: [ 4db0e3114b3db19c2b3fae7a69a692e1edcf7ec718a4a6bf43311dc31185d132 ]
      }
    ]
  },
  {
    ssid: $ESSID_BRUTEFORCE
    channels: [11]
    security: [WPA3-SAE-CCMP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_BRUTEFORCE",
        fingerprints: [ df5b5f9eec31df5ec9e9e020d00abacde6fd7acd3e4cce45675510b72bbb107b ]
      }
    ]
  },
  {
    ssid: $ESSID_DOWNGRADE
    channels: [11]
    security: [WPA3-PSK-SAE-CCMP]
    beacon_rate: 47600
    bssids: [
      {
        address: "$MAC_DOWNGRADE",
        fingerprints: [ 0d8c1f599eedc365bafbe63fb7c7c8f5592f01c3059a619d79035902fa5d781a ]
      }
    ]
  },
  
  {
    ssid: $ESSID_MGT
    channels: [44]
    security: [WPA2-EAM-CCMP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_MGT",
        fingerprints: [ 80efa82dc7030f12d9c6d2b585a152a82acf54b12d69b804195b6d0be83362b7 ]
      },
      {
        address: "$MAC_MGT2",
        fingerprints: [ 80efa82dc7030f12d9c6d2b585a152a82acf54b12d69b804195b6d0be83362b7 ]
      }
    ]
  },
  {
    ssid: $ESSID_MGTTLS
    channels: [44]
    security: [WPA2-EAM-CCMP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_MGTTLS",
        fingerprints: [ 6bc2339da79076b7fe043a855922b06d98dcbea4c3655f59ede516998202e52a ]
      }
    ]
  },
  {
    ssid: $ESSID_MGTRELAY
    channels: [44]
    security: [WPA2-EAM-CCMP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_MGTRELAY",
        fingerprints: [ 6bc2339da79076b7fe043a855922b06d98dcbea4c3655f59ede516998202e52a ]
      }
    ]
  },
  {
    ssid: $ESSID_MGTRELAY_TABLETS
    channels: [44]
    security: [WPA2-EAM-CCMP]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_MGTRELAY_TABLETS",
        fingerprints: [ 6bc2339da79076b7fe043a855922b06d98dcbea4c3655f59ede516998202e52a ]
      }
    ]
  },
    {
    ssid: $ESSID_WEP
    channels: [3]
    security: [NONE]
    beacon_rate: 4760
    bssids: [
      {
        address: "$MAC_WEP",
        fingerprints: [ 4db0e3114b3db19c2b3fae7a69a692e1edcf7ec718a4a6bf43311dc31185d132 ]
      }
    ]
  },

]


# The deauthentication monitor is used to monitor the number of recorded of deauthentication and disassociation frames.
# The global_threshold parameter is used to control when a DEAUTH_FLOOD alert is triggered.
deauth_monitor {
  global_threshold: 10
}

# List of enabled 802.11/WiFi alert types. Remove or comment out (#) an alert type to mute it.
# See: https://go.nzyme.org/alerting
802_11_alerts: [
  unexpected_bssid
  unexpected_ssid
  crypto_change
  unexpected_channel
  unexpected_fingerprint
  beacon_rate_anomaly
  multiple_signal_tracks
  pwnagotchi_advertisement
  bandit_contact
  unknown_ssid
  deauth_flood
]

# Optional: Traps to set up. See: https://go.nzyme.org/deception-and-traps
802_11_traps: []

reporting: {
  email: {
    # One of: SMTP, SMTPS or SMTP_TLS
    transport_strategy: SMTP_TLS

    host: smtp.example.org
    port: 587
    username: "your_username"
    password: "your_password"

    from: "nzyme <nzyme@example.org>"
    subject_prefix: "[NZYME]"
  }
}

# Optional: A device to communicate with nzyme trackers, used to track down physical location of bandits. Please read
# more in the documentation. See: https://go.nzyme.org/bandits-and-trackers
groundstation_device: {}
